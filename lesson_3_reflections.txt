Q When would you want to use a remote repository rather than keeping all your work local?

A When other people need to contribute to the code or working within teams on a project

Q Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A You may not always want all of the changes depictated in a particular file. And sometimes you may not want to store changes or branches locally as they are not relevant to you or your local work. 

Q Describe the differences between forks, clones, and branches. When would you use one instead of another?

A A fork is a copy of someone elses repository, that allows you to keep it on your own GitHub account and edit and add to it, without it affecting the original repository. A clone is a copy of an entire repository either locally or online and is very similar to a fork, except a clone does not give credit to the original creator of the repository. Branches are parts of repositories. They allow differing interpretations of the original files without affecting or changing the master file. I would use a fork where someone elses work needs credit and I haven't obtained permission to edit it, a clone where I had spoken directly with the person and was allowed to copy the files and a branch when experimenting on different parts of the original file

Q What is the benefit of having a copy of the last known state of the remote stored locally?

A Allows easy edits and updates

Q How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A Sharing whole files via an FTP with another person would allow you to view and edit code from the other person, however it would be very difficult to view the edited code or files, unless a person also provided a text sheet explaining changes. It would be very difficult and inefficient. 

Q When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A Adding changes in a separate branch means being able to edit the programme or file and play with it, without breaking the overall file or losing important work by overwriting it. It allows different versions of the same file to be saved, and linked together, and eventually merged when everyone involved is happy with the changes. Making changes in the master benefits you when there are lots of files or hundreds of pages of work, and following different branches becomes confusing.